import axios from 'axios'
  import type { AxiosResponse } from 'axios'

  // 使用环境变量配置API基础URL
  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api'

  // 创建axios实例
  const api = axios.create({
    baseURL: API_BASE_URL,
    timeout: 10000,
    headers: {
      'Content-Type': 'application/json'
    }
  })

  // 请求拦截器
  api.interceptors.request.use(
    (config) => {
      // 添加认证token
      const token = localStorage.getItem('auth_token')
      if (token) {
        config.headers.Authorization = `Bearer ${token}`
      }
      return config
    },
    (error) => {
      return Promise.reject(error)
    }
  )

  // 响应拦截器
  api.interceptors.response.use(
    (response: AxiosResponse) => {
      return response.data
    },
    (error) => {
      console.error('API请求错误:', error)
      return Promise.reject(error)
    }
  )

  // 类型定义
  export interface Student {
    id: number
    name: string
    email?: string
    created_at: string
    total_words: number
    learned_words: number
  }

  export interface Word {
    id: number
    english: string
    chinese: string
    word_set?: string
  }

  export interface WordCard {
    id: number
    english: string
    chinese: string
    student_word_id: number
    current_stage: string
  }

  export interface LearningSession {
    id: number
    student_id: number
    words_count: number
    current_stage: string
    current_group: number
    total_groups: number
    completed: boolean
    word_cards: WordCard[]
  }

  export interface GridStats {
    grid_0: number
    grid_1: number
    grid_2: number
    grid_3: number
    grid_4: number
    grid_5: number
    grid_6: number
    grid_7: number
    grid_8: number
  }

  // 学生相关API
  export const studentAPI = {
    getStudents: (): Promise<Student[]> => api.get('/students'),
    getStudent: (id: number): Promise<Student> => api.get(`/students/${id}`),
    createStudent: (data: { name: string; email?: string }): Promise<Student> =>
      api.post('/students', data),
    updateStudent: (id: number, data: { name: string; email?: string }): Promise<Student> =>
      api.put(`/students/${id}`, data),
    deleteStudent: (id: number): Promise<{ message: string }> =>
      api.delete(`/students/${id}`),
    getStudentStats: (id: number): Promise<any> => api.get(`/students/${id}/stats`)
  }

  // 单词相关API
  export const wordAPI = {
    getWords: (wordSet?: string): Promise<Word[]> =>
      api.get('/words', { params: { word_set: wordSet } }),
    getWordSets: (): Promise<{ name: string }[]> => api.get('/words/sets'),
    createWord: (data: { english: string; chinese: string; word_set?: string }): Promise<Word> =>
      api.post('/words', data),
    importWordsFromExcel: (file: File, wordSet?: string): Promise<any> => {
      const formData = new FormData()
      formData.append('file', file)
      if (wordSet) {
        formData.append('word_set', wordSet)
      }
      return api.post('/words/import', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      })
    },
    assignWordsToStudent: (data: { student_id: number; word_ids: number[] }): Promise<any> =>
      api.post('/words/assign', data),
    getStudentWords: (studentId: number, gridPosition?: number): Promise<any[]> =>
      api.get(`/words/student/${studentId}`, { params: { grid_position: gridPosition } }),
    updateWord: (id: number, data: { english: string; chinese: string; word_set?: string }): Promise<Word> =>
      api.put(`/words/${id}`, data),
    deleteWord: (id: number): Promise<{ message: string }> =>
      api.delete(`/words/${id}`)
  }

  // 学习相关API
  export const learningAPI = {
    startSession: (data: { student_id: number; words_count: number }): Promise<LearningSession> =>
      api.post('/learning/start', data),
    completeStage1: (data: { session_id: number; results: any[] }): Promise<any> =>
      api.post('/learning/stage1/complete', data),
    getStage2Words: (sessionId: number): Promise<LearningSession> =>
      api.get(`/learning/stage2/${sessionId}`),
    completeStage2: (data: { session_id: number; results: any[] }): Promise<any> =>
      api.post('/learning/stage2/complete', data),
    getStage3Words: (sessionId: number): Promise<LearningSession> =>
      api.get(`/learning/stage3/${sessionId}`),
    completeStage3: (data: { session_id: number; results: any[] }): Promise<any> =>
      api.post('/learning/stage3/complete', data),
    getGridStats: (studentId: number): Promise<GridStats> =>
      api.get(`/learning/grid/${studentId}`),
    getStudentSessions: (studentId: number): Promise<any[]> =>
      api.get(`/learning/sessions/${studentId}`)
  }
export default api
