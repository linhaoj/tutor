<template>
  <div class="words-page">
    <div class="page-header">
      <h1>单词管理</h1>
      <div class="header-actions">
        <el-button type="success" @click="showImportDialog">
          <el-icon><Upload /></el-icon>
          导入Excel
        </el-button>
        <el-button type="primary" @click="showAddDialog">
          <el-icon><Plus /></el-icon>
          添加单词
        </el-button>
      </div>
    </div>

    <!-- 单词集筛选 -->
    <div class="filters">
      <el-select 
        v-model="selectedWordSet" 
        placeholder="选择单词集" 
        clearable
        @change="loadWords"
        style="width: 300px"
      >
        <el-option label="全部单词集" value="" />
        <el-option 
          v-for="set in wordSets" 
          :key="set.name" 
          :label="set.name" 
          :value="set.name" 
        />
      </el-select>
      <span class="word-count">共 {{ filteredWords.length }} 个单词</span>
      
      <!-- 删除单词集按钮 -->
      <el-button 
        v-if="selectedWordSet" 
        type="danger" 
        size="small"
        @click="deleteWordSet"
      >
        <el-icon><Delete /></el-icon>
        删除单词集
      </el-button>
    </div>

    <!-- 单词列表 -->
    <el-table :data="paginatedWords" style="width: 100%" stripe>
      <el-table-column prop="english" label="英文" width="200" />
      <el-table-column prop="chinese" label="中文" />
      <el-table-column prop="word_set" label="单词集">
        <template #default="scope">
          <el-tag size="small" type="info">{{ scope.row.word_set || '未分类' }}</el-tag>
        </template>
      </el-table-column>
      <el-table-column label="操作" width="150">
        <template #default="scope">
          <el-button size="small" @click="editWord(scope.row)">编辑</el-button>
          <el-button 
            size="small" 
            type="danger" 
            @click="deleteWord(scope.row)"
          >
            删除
          </el-button>
        </template>
      </el-table-column>
    </el-table>

    <!-- 分页 -->
    <div class="pagination">
      <el-pagination
        v-model:current-page="currentPage"
        v-model:page-size="pageSize"
        :page-sizes="[20, 50, 100]"
        :total="filteredWords.length"
        layout="total, sizes, prev, pager, next, jumper"
      />
    </div>

    <!-- 添加/编辑单词对话框 -->
    <el-dialog 
      v-model="wordDialogVisible" 
      :title="isEditingWord ? '编辑单词' : '添加单词'"
      width="500px"
    >
      <el-form :model="wordForm" label-width="100px">
        <el-form-item label="英文单词" required>
          <el-input v-model="wordForm.english" placeholder="请输入英文单词" />
        </el-form-item>
        <el-form-item label="中文释义" required>
          <el-input 
            v-model="wordForm.chinese" 
            type="textarea" 
            :rows="3"
            placeholder="请输入中文释义"
          />
        </el-form-item>
        <el-form-item label="单词集">
          <el-select 
            v-model="wordForm.word_set" 
            placeholder="选择或输入新的单词集"
            filterable
            allow-create
            style="width: 100%"
          >
            <el-option 
              v-for="set in wordSets" 
              :key="set.name" 
              :label="set.name" 
              :value="set.name" 
            />
          </el-select>
        </el-form-item>
      </el-form>
      
      <template #footer>
        <el-button @click="wordDialogVisible = false">取消</el-button>
        <el-button type="primary" @click="saveWord" :loading="savingWord">
          {{ isEditingWord ? '更新' : '添加' }}
        </el-button>
      </template>
    </el-dialog>

    <!-- Excel导入对话框 -->
    <el-dialog 
      v-model="importDialogVisible" 
      title="导入Excel单词"
      width="600px"
    >
      <div class="import-content">
        <el-alert
          title="导入说明"
          description="Excel文件应包含两列：英文和中文。支持的列名：english/chinese, 英文/中文, English/Chinese"
          type="info"
          :closable="false"
          style="margin-bottom: 20px"
        />
        
        <el-form :model="importForm" label-width="100px">
          <el-form-item label="单词集名称" required>
            <el-input 
              v-model="importForm.word_set" 
              placeholder="例如：新版小学考纲单词V6.0"
            />
            <div class="form-help">
              建议格式：【升序版】托福初级单词、新版小学考纲单词V6.0
            </div>
          </el-form-item>
          
          <el-form-item label="选择文件" required>
            <el-upload
              ref="uploadRef"
              :auto-upload="false"
              :limit="1"
              accept=".xlsx,.xls"
              :on-change="handleFileChange"
              :file-list="fileList"
            >
              <el-button type="primary">
                <el-icon><Upload /></el-icon>
                选择Excel文件
              </el-button>
              <template #tip>
                <div class="el-upload__tip">
                  只能上传xlsx/xls文件，且不超过10MB
                </div>
              </template>
            </el-upload>
          </el-form-item>
        </el-form>
      </div>
      
      <template #footer>
        <el-button @click="importDialogVisible = false">取消</el-button>
        <el-button 
          type="primary" 
          @click="importWords" 
          :loading="importing"
          :disabled="!selectedFile || !importForm.word_set"
        >
          开始导入
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, reactive } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { Plus, Upload, Delete } from '@element-plus/icons-vue'

// 模拟数据
const words = ref([
  { id: 1, english: 'hello', chinese: '你好；喂', word_set: '新版小学考纲单词V6.0' },
  { id: 2, english: 'world', chinese: '世界；全世界', word_set: '新版小学考纲单词V6.0' },
  { id: 3, english: 'apple', chinese: '苹果', word_set: '【升序版】托福初级单词' },
  { id: 4, english: 'computer', chinese: '计算机；电脑', word_set: '【升序版】托福初级单词' },
  { id: 5, english: 'study', chinese: '学习；研究', word_set: '新版小学考纲单词V6.0' }
])

const wordSets = ref([
  { name: '新版小学考纲单词V6.0' },
  { name: '【升序版】托福初级单词' },
  { name: '高中英语必修单词' }
])

// 状态
const selectedWordSet = ref('')
const currentPage = ref(1)
const pageSize = ref(20)
const wordDialogVisible = ref(false)
const importDialogVisible = ref(false)
const isEditingWord = ref(false)
const savingWord = ref(false)
const importing = ref(false)

// 表单数据
const wordForm = reactive({
  id: 0,
  english: '',
  chinese: '',
  word_set: ''
})

const importForm = reactive({
  word_set: ''
})

// 文件上传
const fileList = ref([])
const selectedFile = ref<File | null>(null)

// 计算属性
const filteredWords = computed(() => {
  if (!selectedWordSet.value) return words.value
  return words.value.filter(word => word.word_set === selectedWordSet.value)
})

const paginatedWords = computed(() => {
  const start = (currentPage.value - 1) * pageSize.value
  const end = start + pageSize.value
  return filteredWords.value.slice(start, end)
})

// 方法
const loadWords = () => {
  currentPage.value = 1
}

const showAddDialog = () => {
  isEditingWord.value = false
  Object.assign(wordForm, { id: 0, english: '', chinese: '', word_set: '' })
  wordDialogVisible.value = true
}

const editWord = (word: any) => {
  isEditingWord.value = true
  Object.assign(wordForm, word)
  wordDialogVisible.value = true
}

const saveWord = async () => {
  if (!wordForm.english || !wordForm.chinese) {
    ElMessage.error('请填写完整的单词信息')
    return
  }
  
  savingWord.value = true
  
  try {
    if (isEditingWord.value) {
      const index = words.value.findIndex(w => w.id === wordForm.id)
      if (index !== -1) {
        words.value[index] = { ...wordForm }
      }
      ElMessage.success('单词更新成功')
    } else {
      const newWord = { ...wordForm, id: Date.now() }
      words.value.push(newWord)
      
      if (wordForm.word_set && !wordSets.value.find(s => s.name === wordForm.word_set)) {
        wordSets.value.push({ name: wordForm.word_set })
      }
      
      ElMessage.success('单词添加成功')
    }
    
    wordDialogVisible.value = false
  } catch (error) {
    ElMessage.error('操作失败')
  } finally {
    savingWord.value = false
  }
}

const deleteWord = async (word: any) => {
  try {
    await ElMessageBox.confirm(`确定要删除单词 "${word.english}" 吗？`, '确认删除', {
      type: 'warning'
    })
    
    const index = words.value.findIndex(w => w.id === word.id)
    if (index !== -1) {
      words.value.splice(index, 1)
      ElMessage.success('单词删除成功')
    }
  } catch {}
}

const deleteWordSet = async () => {
  if (!selectedWordSet.value) return
  
  const wordsInSet = words.value.filter(w => w.word_set === selectedWordSet.value)
  
  try {
    await ElMessageBox.confirm(
      `确定要删除单词集 "${selectedWordSet.value}" 吗？这将删除该单词集下的所有 ${wordsInSet.length} 个单词。`, 
      '确认删除单词集', 
      {
        type: 'warning',
        confirmButtonText: '确认删除',
        cancelButtonText: '取消'
      }
    )
    
    // 删除该单词集下的所有单词
    words.value = words.value.filter(w => w.word_set !== selectedWordSet.value)
    
    // 从单词集列表中移除
    const setIndex = wordSets.value.findIndex(s => s.name === selectedWordSet.value)
    if (setIndex !== -1) {
      wordSets.value.splice(setIndex, 1)
    }
    
    // 重置筛选
    selectedWordSet.value = ''
    
    ElMessage.success(`单词集 "${selectedWordSet.value}" 及其包含的 ${wordsInSet.length} 个单词已删除`)
  } catch {}
}

const showImportDialog = () => {
  importForm.word_set = ''
  fileList.value = []
  selectedFile.value = null
  importDialogVisible.value = true
}

const handleFileChange = (file: any) => {
  selectedFile.value = file.raw
}

const importWords = async () => {
  if (!selectedFile.value || !importForm.word_set) {
    ElMessage.error('请选择文件并输入单词集名称')
    return
  }
  
  importing.value = true
  
  try {
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    const mockImportedWords = [
      { id: Date.now() + 1, english: 'imported1', chinese: '导入的单词1', word_set: importForm.word_set },
      { id: Date.now() + 2, english: 'imported2', chinese: '导入的单词2', word_set: importForm.word_set },
      { id: Date.now() + 3, english: 'imported3', chinese: '导入的单词3', word_set: importForm.word_set }
    ]
    
    words.value.push(...mockImportedWords)
    
    if (!wordSets.value.find(s => s.name === importForm.word_set)) {
      wordSets.value.push({ name: importForm.word_set })
    }
    
    ElMessage.success(`成功导入 ${mockImportedWords.length} 个单词`)
    importDialogVisible.value = false
  } catch (error) {
    ElMessage.error('导入失败')
  } finally {
    importing.value = false
  }
}

onMounted(() => {
  // TODO: 加载数据
})
</script>

<style scoped>
.words-page {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.page-header h1 {
  margin: 0;
  color: #303133;
}

.header-actions {
  display: flex;
  gap: 12px;
}

.filters {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 20px;
  padding: 16px;
  background: #f5f7fa;
  border-radius: 8px;
}

.word-count {
  color: #606266;
  font-size: 14px;
}

.pagination {
  margin-top: 20px;
  display: flex;
  justify-content: center;
}

.import-content .form-help {
  font-size: 12px;
  color: #909399;
  margin-top: 4px;
}
</style>
